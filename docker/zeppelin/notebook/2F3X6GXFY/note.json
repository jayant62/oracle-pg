{
  "paragraphs": [
    {
      "text": "%md\n## Introduction\nThis example shows how integrating multiple datasets, using a graph, facilitates additional analytics that can lead to new insights. We will use three small datasets for illustrative purposes. \nThe first contains accounts and account owners. The second is purchases by the people who own those accounts. The third is transactions between these accounts.\n\nThe following common graph query and analyses are then performed on this integrated dataset: pattern matching, detection of cycles, finding important nodes, community detection, and recommendation.\n\n![](https://user-images.githubusercontent.com/4862919/63682754-d46f0680-c822-11e9-89ae-9c84e0aec2b3.jpg)",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 15:19:29.213",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThis example shows how integrating multiple datasets, using a graph, facilitates additional analytics that can lead to new insights. We will use three small datasets for illustrative purposes.\u003cbr/\u003eThe first contains accounts and account owners. The second is purchases by the people who own those accounts. The third is transactions between these accounts.\u003c/p\u003e\n\u003cp\u003eThe following common graph query and analyses are then performed on this integrated dataset: pattern matching, detection of cycles, finding important nodes, community detection, and recommendation.\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://user-images.githubusercontent.com/4862919/63682754-d46f0680-c822-11e9-89ae-9c84e0aec2b3.jpg\" /\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310167_-141770078",
      "id": "20190329-123523_1871171899",
      "dateCreated": "2020-02-23 13:08:30.167",
      "dateStarted": "2020-05-06 15:19:29.224",
      "dateFinished": "2020-05-06 15:19:29.264",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\nThe first step is to load the graph into memory if necessary. The graph is defined in the pgx.conf file.\nIf successful the graph is loaded into the variable `g` of type `PgxGraph`. ",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 15:30:39.774",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eThe first step is to load the graph into memory if necessary. The graph is defined in the pgx.conf file.\u003cbr/\u003eIf successful the graph is loaded into the variable \u003ccode\u003eg\u003c/code\u003e of type \u003ccode\u003ePgxGraph\u003c/code\u003e.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1588778602619_-828982266",
      "id": "20200506-152322_1259168416",
      "dateCreated": "2020-05-06 15:23:22.619",
      "dateStarted": "2020-05-06 15:30:39.788",
      "dateFinished": "2020-05-06 15:30:39.844",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\ng \u003d session.getGraph(\"Customer 360\")",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 15:33:46.721",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB"
        },
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "PgxGraph[name\u003dCustomer 360,N\u003d15,E\u003d24,created\u003d1588777848831]"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310204_1999191484",
      "id": "20190402-164753_989376579",
      "dateCreated": "2020-02-23 13:08:30.204",
      "dateStarted": "2020-05-06 15:33:46.838",
      "dateFinished": "2020-05-06 15:33:47.614",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Let\u0027s look at what the Nodes and Edges represent (this is defined in the graph config file named all_pgx.json)\n// label() and id() are built-in functions that return the label and id values, if any, for vertices and edges.\n// This graph has no labels on the vertices. \ng.queryPgql(\"SELECT distinct label(e) MATCH ()-[e]-()\");",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 15:49:12.319",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "label(e)": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": false,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "label(e)\nowned_by\nparent_of\npurchased\ntransfer"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1588778811941_-1714710442",
      "id": "20200506-152651_600911257",
      "dateCreated": "2020-05-06 15:26:51.941",
      "dateStarted": "2020-05-06 15:34:30.157",
      "dateFinished": "2020-05-06 15:34:31.324",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// There is a property named \u0027type\u0027 however which indicate what a vertex represents\ng.queryPgql(\"SELECT distinct v.type MATCH (v)\");",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 15:40:36.136",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "v.type": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": false,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "v.type\naccount\ncustomer\nmerchant"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1588779515765_-268097714",
      "id": "20200506-153835_508842413",
      "dateCreated": "2020-05-06 15:38:35.765",
      "dateStarted": "2020-05-06 15:39:27.887",
      "dateFinished": "2020-05-06 15:39:28.664",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// List the id and account_no for vertices of type acoount\ng.queryPgql(\"SELECT id(v), v.account_no MATCH (v) WHERE v.type\u003d\u0027account\u0027\");",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 15:51:11.017",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "id(v)": "string",
                      "v.account_no": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionSupport": false,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/scala"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "id(v)\tv.account_no\n201\txxx-yyy-201\n202\txxx-yyy-202\n203\txxx-yyy-203\n204\txxx-yyy-204\n211\txxx-zzz-001\n212\txxx-zzz-002"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1588779822051_1441318761",
      "id": "20200506-154342_1095781679",
      "dateCreated": "2020-05-06 15:43:42.051",
      "dateStarted": "2020-05-06 15:46:37.962",
      "dateFinished": "2020-05-06 15:46:38.479",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Show details for \"xxx-yyy-202\"\ng.queryPgql(\"\"\"\n  SELECT ID(a), a.account_no, a.balance\n  MATCH (a)\n  WHERE a.type \u003d \u0027account\u0027\n    AND a.account_no \u003d \u0027xxx-yyy-202\u0027\n\"\"\");",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 15:47:34.081",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "ID(a)": "string",
                      "a.account_no": "string",
                      "a.balance": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "ID(a)\ta.account_no\ta.balance\n202\txxx-yyy-202\t200"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310206_-719836348",
      "id": "20190329-144320_280072223",
      "dateCreated": "2020-02-23 13:08:30.207",
      "dateStarted": "2020-05-06 13:24:36.074",
      "dateFinished": "2020-05-06 13:24:38.957",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Show which other entities the account \"xxx-yyy-202\" is connected to and the edge label (i.e. reason for the connection)\ng.queryPgql(\"\"\"\n  SELECT a.account_no, LABEL(e), n.type\n  MATCH (a)-[e]-(n)\n  WHERE a.type \u003d \u0027account\u0027\n    AND a.account_no \u003d \u0027xxx-yyy-202\u0027\n  ORDER BY LABEL(e)\n\"\"\");",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 15:53:28.923",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "a.account_no": "string",
                      "LABEL(e)": "string",
                      "n.type": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "a.account_no\tLABEL(e)\tn.type\nxxx-yyy-202\towned_by\tcustomer\nxxx-yyy-202\tpurchased\tmerchant\nxxx-yyy-202\tpurchased\tmerchant\nxxx-yyy-202\tpurchased\tmerchant\nxxx-yyy-202\ttransfer\taccount\nxxx-yyy-202\ttransfer\taccount\nxxx-yyy-202\ttransfer\taccount\nxxx-yyy-202\ttransfer\taccount\nxxx-yyy-202\ttransfer\taccount"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310208_441947397",
      "id": "20190329-124705_669100399",
      "dateCreated": "2020-02-23 13:08:30.209",
      "dateStarted": "2020-04-27 14:52:52.384",
      "dateFinished": "2020-04-27 14:52:52.726",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Pattern Matching\nPGQL is convenient for detecting specific patterns.\nFind accounts that had an inbound and an outbound transfer, of over 500, on the same day. The PGQL query for this is:",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 15:54:41.852",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003ePattern Matching\u003c/h2\u003e\n\u003cp\u003ePGQL is convenient for detecting specific patterns.\u003cbr/\u003eFind accounts that had an inbound and an outbound transfer, of over 500, on the same day. The PGQL query for this is:\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310212_-397584666",
      "id": "20190329-123650_1595618116",
      "dateCreated": "2020-02-23 13:08:30.212",
      "dateStarted": "2020-05-06 15:54:41.858",
      "dateFinished": "2020-05-06 15:54:41.882",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Show accounts that had an inbound transfer and outbound transfer on the same day and each transaction amount was \u003e 500.\ng.queryPgql(\"\"\"\n  SELECT a.account_no, a.balance, t1.amount, t2.amount, t1.date\n  MATCH (a)\u003c-[t1:transfer]-(a1)\n      , (a)-[t2:transfer]-\u003e(a2)\n  WHERE t1.date \u003d t2.date\n    AND t1.amount \u003e 500\n    AND t2.amount \u003e 500\n\"\"\");",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 15:56:15.360",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "a.account_no": "string",
                      "a.balance": "string",
                      "t1.amount": "string",
                      "t2.amount": "string",
                      "t1.date": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "a.account_no\ta.balance\tt1.amount\tt2.amount\tt1.date\nxxx-yyy-202\t200\t900\t850\t2018-10-06"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310225_2091800673",
      "id": "20190328-161704_390823673",
      "dateCreated": "2020-02-23 13:08:30.225",
      "dateStarted": "2020-05-06 15:56:15.441",
      "dateFinished": "2020-05-06 15:56:16.784",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Detect Cycles\nNext we use PGQL to find a series of transfers that start and end at the same account such as A to B to A, or A to B to C to A.\n\n![](https://user-images.githubusercontent.com/4862919/63682879-1ef08300-c823-11e9-8559-a142851b1ed1.jpg)\n![](https://user-images.githubusercontent.com/4862919/63683037-8a3a5500-c823-11e9-9677-c3788f4df1cd.jpg)",
      "user": "anonymous",
      "dateUpdated": "2020-04-27 14:52:53.971",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eDetect Cycles\u003c/h2\u003e\n\u003cp\u003eNext we use PGQL to find a series of transfers that start and end at the same account such as A to B to A, or A to B to C to A.\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://user-images.githubusercontent.com/4862919/63682879-1ef08300-c823-11e9-8559-a142851b1ed1.jpg\" /\u003e\u003cbr/\u003e\u003cimg src\u003d\"https://user-images.githubusercontent.com/4862919/63683037-8a3a5500-c823-11e9-9677-c3788f4df1cd.jpg\" /\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310236_1341728357",
      "id": "20190329-123841_697678840",
      "dateCreated": "2020-02-23 13:08:30.236",
      "dateStarted": "2020-04-27 14:52:54.216",
      "dateFinished": "2020-04-27 14:52:54.259",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Show any transactions where money is going back and forth in two accounts. i.e. A-\u003eB\u003e-\u003eA\ng.queryPgql(\"\"\"\n  SELECT a1.account_no, t1.date, t1.amount, a2.account_no, t2.date, t2.amount\n  MATCH (a1)-[t1:transfer]-\u003e(a2)-[t2:transfer]-\u003e(a1)\n  WHERE t1.date \u003c t2.date\n\"\"\");",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 17:42:31.857",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 84.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "a1.account_no": "string",
                      "t1.date": "string",
                      "t1.amount": "string",
                      "a2.account_no": "string",
                      "t2.date": "string",
                      "t2.amount": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "a1.account_no\tt1.date\tt1.amount\ta2.account_no\tt2.date\tt2.amount\nxxx-yyy-201\t2018-10-05\t200\txxx-yyy-202\t2018-10-10\t300"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310241_731123879",
      "id": "20190328-162035_1959457469",
      "dateCreated": "2020-02-23 13:08:30.241",
      "dateStarted": "2020-04-27 14:52:54.457",
      "dateFinished": "2020-04-27 14:52:54.806",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Show any cyclic transactions between three accounts, i.e. A-\u003eB-\u003eC-\u003eA.\ng.queryPgql(\"\"\"\n  SELECT a1.account_no, t1.amount, a2.account_no, t2.amount\n       , a3.account_no, t3.amount\n  MATCH (a1)-[t1:transfer]-\u003e(a2)-[t2:transfer]-\u003e(a3)-[t3:transfer]-\u003e(a1)\n  WHERE t1.date \u003c t2.date\n  AND t2.date \u003c t3.date\n\"\"\");",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 16:08:42.178",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 88.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "a1.account_no": "string",
                      "t1.amount": "string",
                      "a2.account_no": "string",
                      "t2.amount": "string",
                      "a3.account_no": "string",
                      "t3.amount": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "a1.account_no\tt1.amount\ta2.account_no\tt2.amount\ta3.account_no\tt3.amount\nxxx-yyy-201\t500\txxx-yyy-203\t450\txxx-yyy-204\t400"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310246_-854486388",
      "id": "20190328-163004_1966630867",
      "dateCreated": "2020-02-23 13:08:30.248",
      "dateStarted": "2020-04-27 14:52:55.018",
      "dateFinished": "2020-04-27 14:52:55.262",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Graph Algorithms \nThe next set of examples use graph algorithms to find important or influential accounts (PageRank), detect communities (Connected Components), and make recommendations (Personalized PageRank).\n\nWe start with PageRank. The well-known PageRank algorithm identifies important or influential nodes in a graph. Here we use it to find influential accounts.",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 18:14:26.063",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false,
          "completionKey": "TAB"
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eGraph Algorithms\u003c/h2\u003e\n\u003cp\u003eThe next set of examples use graph algorithms to find important or influential accounts (PageRank), detect communities (Connected Components), and make recommendations (Personalized PageRank).\u003c/p\u003e\n\u003cp\u003eWe start with PageRank. The well-known PageRank algorithm identifies important or influential nodes in a graph. Here we use it to find influential accounts. In this particular graph that happens to be accounts involved in the most number of transactions.\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1588788431192_1536285952",
      "id": "20200506-180711_167988969",
      "dateCreated": "2020-05-06 18:07:11.192",
      "dateStarted": "2020-05-06 18:12:14.188",
      "dateFinished": "2020-05-06 18:12:14.234",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Influential Accounts\n\n![](https://user-images.githubusercontent.com/4862919/63682708-b5707480-c822-11e9-8c59-0cae6ed22336.jpg)\nThe subgraph (i.e. just the accounts and transfers among them) looks as above.\nThe steps we need to execute to compute the PageRank of the accounts are:\n1. Create a subgraph of just the accounts and transfers among them\n2. Run the PageRank algorithm\n3. Print the results\n",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 18:19:06.221",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eInfluential Accounts\u003c/h2\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://user-images.githubusercontent.com/4862919/63682708-b5707480-c822-11e9-8c59-0cae6ed22336.jpg\" /\u003e\u003cbr/\u003eThe subgraph (i.e. just the accounts and transfers among them) looks as above.\u003cbr/\u003eThe steps we need to execute to compute the PageRank of the accounts are:\u003cbr/\u003e1. Create a subgraph of just the accounts and transfers among them\u003cbr/\u003e2. Run the PageRank algorithm\u003cbr/\u003e3. Print the results\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310260_1127525625",
      "id": "20190328-163239_404136926",
      "dateCreated": "2020-02-23 13:08:30.260",
      "dateStarted": "2020-05-06 18:19:06.228",
      "dateFinished": "2020-05-06 18:19:06.261",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Create a subgraph of accounts, i.e. apply a filter on the original graph to only keep edges labeled \u0027transfer\u0027 and the vertices they connect (i.e. the \u0027accounts\u0027)\nsg \u003d g.filter(new EdgeFilter(\"edge.label()\u003d\u0027transfer\u0027\"));",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 18:32:32.934",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "PgxGraph[name\u003dsub-graph_10,N\u003d6,E\u003d8,created\u003d1588789953965]"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310273_2054355362",
      "id": "20190328-163330_1056763914",
      "dateCreated": "2020-02-23 13:08:30.274",
      "dateStarted": "2020-05-06 18:32:33.007",
      "dateFinished": "2020-05-06 18:32:35.366",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// When a PGX shell starts up it pre-populates global variables\n// PgxInstance instance (a handle to the PGX Graph Server instance)\n// PgXSession session  (that we used above to load the Customer 360 graph)\n// PgxAnalyst analyst (used to runthe 50+ built-in algorithms on a graph)\n// pagerank() will create and populate a vertex property named \u0027pagerank\u0027\nanalyst.pagerank(sg);",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 18:32:39.645",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "VertexProperty[name\u003dpagerank,type\u003ddouble,graph\u003dsub-graph_10]"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310283_-813363346",
      "id": "20190328-163457_238150311",
      "dateCreated": "2020-02-23 13:08:30.283",
      "dateStarted": "2020-05-06 18:32:39.719",
      "dateFinished": "2020-05-06 18:32:41.272",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Query the pagerank value for each vertex\nsg.queryPgql(\"\"\"\n  SELECT a.account_no, a.pagerank\n  MATCH (a)\n  ORDER BY a.pagerank DESC\n\"\"\");",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 18:32:43.809",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 226.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "a.account_no": "string",
                      "a.pagerank": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "a.account_no\ta.pagerank\nxxx-yyy-201\t0.18012007557258927\nxxx-yyy-204\t0.1412461615467829\nxxx-yyy-203\t0.1365633635065475\nxxx-yyy-202\t0.12293884324085073\nxxx-zzz-002\t0.05987452026569676\nxxx-zzz-001\t0.025000000000000005"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310293_1394780200",
      "id": "20190328-163543_48958968",
      "dateCreated": "2020-02-23 13:08:30.294",
      "dateStarted": "2020-05-06 18:32:43.912",
      "dateFinished": "2020-05-06 18:32:44.383",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Community Detection",
      "user": "anonymous",
      "dateUpdated": "2020-04-27 14:54:25.402",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1582463310300_430088228",
      "id": "20190328-163825_497501464",
      "dateCreated": "2020-02-23 13:08:30.300",
      "dateStarted": "2020-04-27 14:54:25.402",
      "dateFinished": "2020-04-27 14:54:25.425",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Community Detection\n\nLet\u0027s find which subsets of accounts form communities. That is, there are more transfers among accounts in the same subset than there are between those and accounts in another subset. We\u0027ll use the built-in weekly / strongly connected components algorithm.\n\nThe first step is to create a subgraph that only has the accounts and the transfers among them. This is done by creating and applying an edge filter (for edges with the table \"transfer\u0027) to the graph.\n\n![](https://user-images.githubusercontent.com/4862919/63683125-c2419800-c823-11e9-8ca1-124a50398a5e.jpg)",
      "user": "anonymous",
      "dateUpdated": "2020-04-27 14:56:18.290",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eCommunity Detection\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s find which subsets of accounts form communities. That is, there are more transfers among accounts in the same subset than there are between those and accounts in another subset. We\u0026rsquo;ll use the built-in weekly / strongly connected components algorithm.\u003c/p\u003e\n\u003cp\u003eThe first step is to create a subgraph that only has the accounts and the transfers among them. This is done by creating and applying an edge filter (for edges with the table \u0026quot;transfer\u0026rsquo;) to the graph.\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://user-images.githubusercontent.com/4862919/63683125-c2419800-c823-11e9-8ca1-124a50398a5e.jpg\" /\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1587999277749_1879762406",
      "id": "20200427-145437_1818568832",
      "dateCreated": "2020-04-27 14:54:37.750",
      "dateStarted": "2020-04-27 14:56:18.308",
      "dateFinished": "2020-04-27 14:56:18.373",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\nsg \u003d g.filter(new EdgeFilter(\"edge.label()\u003d\u0027transfer\u0027\"))",
      "user": "anonymous",
      "dateUpdated": "2020-04-27 14:52:57.133",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "PgxGraph[name\u003dsub-graph_66,N\u003d6,E\u003d8,created\u003d1587999177494]"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310311_-284527983",
      "id": "20190328-164058_1428502133",
      "dateCreated": "2020-02-23 13:08:30.311",
      "dateStarted": "2020-04-27 14:52:57.319",
      "dateFinished": "2020-04-27 14:52:57.527",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Now run the Weakly Connected Components algorithm\n// It returns a collection of graph partition each of which is a connected component\n// WCC should return only 1 partition for the above graph\nresult \u003d analyst.wcc(sg);\n// List the partitions and the number of vertices in each\nresult.eachWithIndex {\n    it, index -\u003e println \"Partition \" + index + \" has \" +it.size() + \" vertices\";\n} ;\n    ",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 18:38:43.940",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {
          "index": "",
          "it.size": ""
        },
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Partition 0 has 6 vertices\nComponentCollection[name\u003dA28827C5-1366-4056-AE5D-4F4FA7B88CF1,graph\u003dsub-graph_10]"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310321_-26620187",
      "id": "20190328-164119_1476039810",
      "dateCreated": "2020-02-23 13:08:30.321",
      "dateStarted": "2020-05-06 18:36:45.519",
      "dateFinished": "2020-05-06 18:36:45.948",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// List the other accounts which are in the same connected component (aka partition) as account \u0027\u0027xxx-yyy-201\u0027\nrs \u003d sg.queryPgql(\"SELECT a MATCH (a) WHERE a.account_no \u003d \u0027xxx-yyy-201\u0027\")\nfor (r in rs) {\n  v \u003d r.getVertex(1)\n  partition \u003d result.getPartitionByVertex(v);\n  partition.each{println it.getProperty(\"account_no\")}\n}",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 18:44:07.071",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "xxx-yyy-201\nxxx-yyy-202\nxxx-yyy-203\nxxx-yyy-204\nxxx-zzz-001\nxxx-zzz-002"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310339_-1954671672",
      "id": "20190328-164130_1125722494",
      "dateCreated": "2020-02-23 13:08:30.339",
      "dateStarted": "2020-05-06 18:43:01.129",
      "dateFinished": "2020-05-06 18:43:02.517",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Run a strongly connected components algorithm instead. i.e. the Kosaraju SCC algorithm\n// This should return 3 partitions\nresult \u003d analyst.sccKosaraju(sg)\n\n//  List the partitions and the number of vertices in each\nresult.eachWithIndex {\n    it, index -\u003e println \"Partition \" + index + \" has \" +it.size() + \" vertices\";\n} ;",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 18:43:04.944",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "Partition 0 has 1 vertices\nPartition 1 has 4 vertices\nPartition 2 has 1 vertices\nComponentCollection[name\u003dB1187C0E-C88B-4775-8F7A-5C035A57E962,graph\u003dsub-graph_10]\nComponentCollection[name\u003dB1187C0E-C88B-4775-8F7A-5C035A57E962,graph\u003dsub-graph_10]\nComponentCollection[name\u003dB1187C0E-C88B-4775-8F7A-5C035A57E962,graph\u003dsub-graph_10]"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310346_-2090461197",
      "id": "20190328-164236_298791382",
      "dateCreated": "2020-02-23 13:08:30.347",
      "dateStarted": "2020-05-06 18:43:05.015",
      "dateFinished": "2020-05-06 18:43:05.790",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// List the other accounts which are in the same connected component (aka partition) as account \u0027\u0027xxx-yyy-201\u0027\n// This time there should be only 4 vertices in that partition\nrs \u003d sg.queryPgql(\"SELECT a MATCH (a) WHERE a.account_no \u003d \u0027xxx-yyy-201\u0027\")\nfor (r in rs) {\n  v \u003d r.getVertex(1)\n  partition \u003d result.getPartitionByVertex(v);\n  partition.each{println it.getProperty(\"account_no\") + \"\\t\" + it.getId()}\n}",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 18:47:57.934",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "xxx-yyy-201\t201\nxxx-yyy-202\t202\nxxx-yyy-203\t203\nxxx-yyy-204\t204"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310350_-2073816255",
      "id": "20190328-164629_440403254",
      "dateCreated": "2020-02-23 13:08:30.350",
      "dateStarted": "2020-05-06 18:47:58.004",
      "dateFinished": "2020-05-06 18:47:58.776",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Now add the partition index to each vertex in a newly created property named \u0027component\u0027\n\ncs \u003d sg.createChangeSet()\nrs \u003d sg.queryPgql(\"SELECT DISTINCT a MATCH (a)-[:transfer]-()\");\n// Get each vertex, find the partition it is in, add that partition index to the property \u0027component\u0027\nfor (r in rs) {\n  v \u003d r.getVertex(1)\n  i \u003d result.getPartitionIndexOfVertex(v)\n  cs.updateVertex(v.getId()).setProperty(\"component\", i)\n}\nsg \u003d cs.build();\n// list the vertex proerties \n//sg.getVertexProperties();",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 18:56:51.713",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "true"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310355_-1418710576",
      "id": "20190510-104938_115727887",
      "dateCreated": "2020-02-23 13:08:30.355",
      "dateStarted": "2020-05-06 18:56:51.800",
      "dateFinished": "2020-05-06 18:56:52.521",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Now list Accounts by connected component\nsg.queryPgql(\"\"\"\n  SELECT a.component, a.account_no MATCH (a)\n  WHERE a.type\u003d\u0027account\u0027 ORDER BY a.component\n\"\"\");",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 18:58:29.814",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 140.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {
                    "columns": [
                      {
                        "name": "a.component",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      },
                      {
                        "name": "a.account_no",
                        "visible": true,
                        "width": "*",
                        "sort": {},
                        "filters": [
                          {}
                        ],
                        "pinned": ""
                      }
                    ],
                    "scrollFocus": {},
                    "selection": [],
                    "grouping": {
                      "grouping": [],
                      "aggregations": [],
                      "rowExpandedStates": {}
                    },
                    "treeView": {},
                    "pagination": {
                      "paginationCurrentPage": 1.0,
                      "paginationPageSize": 250.0
                    }
                  },
                  "tableColumnTypeState": {
                    "names": {
                      "a.component": "string",
                      "a.account_no": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": true,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "a.component\ta.account_no\n0\txxx-zzz-001\n1\txxx-yyy-202\n1\txxx-yyy-203\n1\txxx-yyy-204\n1\txxx-yyy-201\n2\txxx-zzz-002"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310358_1142726119",
      "id": "20190510-104936_553977665",
      "dateCreated": "2020-02-23 13:08:30.358",
      "dateStarted": "2020-05-06 18:57:32.259",
      "dateFinished": "2020-05-06 18:57:32.670",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n## Recommendation\n\nLastly let\u0027s use Personalized PageRank to find stores that John may purchase from given that people he is connected to have made purchases from those stores.\nThe steps are similar to the ones above. Filter the original graph to get a subgraph of just accounts and merchants.\nHwever this gives a graph like the one shown below which only has edges from accounts to merchants.\nPersonalized PageRank(PPR)  needs the reverse edges too so we add edges (labeled \u0027purchased_by\u0027) from merchants to accounts.\nThen we run the PPR for John.\n\n![](https://user-images.githubusercontent.com/4862919/63682622-8f4ad480-c822-11e9-9979-b8a1525240fe.jpg)",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 19:09:08.732",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionSupport": false
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/markdown",
        "editorHide": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003ch2\u003eRecommendation\u003c/h2\u003e\n\u003cp\u003eLastly let\u0026rsquo;s use Personalized PageRank to find stores that John may purchase from given that people he is connected to have made purchases from those stores.\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://user-images.githubusercontent.com/4862919/63682622-8f4ad480-c822-11e9-9979-b8a1525240fe.jpg\" /\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310360_1730736159",
      "id": "20190328-164638_277149599",
      "dateCreated": "2020-02-23 13:08:30.360",
      "dateStarted": "2020-04-27 15:03:36.057",
      "dateFinished": "2020-04-27 15:03:36.338",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\nsg \u003d g.filter(new EdgeFilter(\"edge.label()\u003d\u0027purchased\u0027\"))",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 19:06:20.635",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "results": {},
        "enabled": true,
        "fontSize": 9.0
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "PgxGraph[name\u003dsub-graph_25,N\u003d9,E\u003d11,created\u003d1588791980890]"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310361_-886448301",
      "id": "20190328-164719_412230931",
      "dateCreated": "2020-02-23 13:08:30.361",
      "dateStarted": "2020-05-06 19:06:20.770",
      "dateFinished": "2020-05-06 19:06:20.974",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%md\n\nAdd reverse edges.\n\n![](https://user-images.githubusercontent.com/4862919/63683184-eef5af80-c823-11e9-85be-495295d0c2a3.jpg)\n![](https://user-images.githubusercontent.com/4862919/63683190-f1f0a000-c823-11e9-8e3d-96152f4edf98.jpg)",
      "user": "anonymous",
      "dateUpdated": "2020-04-27 14:57:47.858",
      "config": {
        "colWidth": 12.0,
        "fontSize": 9.0,
        "enabled": true,
        "results": {},
        "editorSetting": {
          "language": "markdown",
          "editOnDblClick": true,
          "completionKey": "TAB",
          "completionSupport": false
        },
        "editorMode": "ace/mode/markdown",
        "editorHide": true,
        "tableHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "HTML",
            "data": "\u003cdiv class\u003d\"markdown-body\"\u003e\n\u003cp\u003eAdd reverse edges.\u003c/p\u003e\n\u003cp\u003e\u003cimg src\u003d\"https://user-images.githubusercontent.com/4862919/63683184-eef5af80-c823-11e9-85be-495295d0c2a3.jpg\" /\u003e\u003cbr/\u003e\u003cimg src\u003d\"https://user-images.githubusercontent.com/4862919/63683190-f1f0a000-c823-11e9-8e3d-96152f4edf98.jpg\" /\u003e\u003c/p\u003e\n\u003c/div\u003e"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1587999412225_1885063449",
      "id": "20200427-145652_1076641677",
      "dateCreated": "2020-04-27 14:56:52.225",
      "dateStarted": "2020-04-27 14:57:47.859",
      "dateFinished": "2020-04-27 14:57:47.894",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// For each edge labeled purchased add a reverse one labeled purcahsed_by between the vertices it connects.\nCS \u003d sg.createChangeSet();\nRS \u003d sg.queryPgql(\"SELECT a, x WHERE (a)-[:purchased]-\u003e(x)\");\ni \u003d 1;\nfor (r in RS) {\n    a \u003d r.getVertex(1).getId()\n    x \u003d r.getVertex(2).getId()\n    CS.addEdge(x, a).setLabel(\"purchased_by\")\n    i++\n}\nsg \u003d CS.build();\n// verify that the edges were created\nsg.queryPgql(\"\"\"\n  SELECT ID(r), a.account_no, x.name\n  MATCH (a)\u003c-[r:purchased_by]-(x)\n\"\"\");",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 19:07:26.069",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 300.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "ID(r)": "string",
                      "a.account_no": "string",
                      "x.name": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "ID(r)\ta.account_no\tx.name\n11\txxx-yyy-201\tApple Store\n12\txxx-yyy-201\tPC Paradise\n13\txxx-yyy-202\tApple Store\n14\txxx-yyy-202\tPC Paradise\n15\txxx-yyy-202\tAsia Books\n16\txxx-yyy-203\tApple Store\n17\txxx-yyy-203\tPC Paradise\n18\txxx-yyy-203\tKindle Store\n19\txxx-yyy-204\tKindle Store\n20\txxx-yyy-204\tAsia Books\n21\txxx-yyy-204\tABC Travel"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310365_1687717399",
      "id": "20190328-164743_692256517",
      "dateCreated": "2020-02-23 13:08:30.366",
      "dateStarted": "2020-05-06 19:07:01.852",
      "dateFinished": "2020-05-06 19:07:02.669",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Now run the PPR. Get the vertex for John\u0027s account. Specify that as the vetex to use in the personalization.\nvertexSet \u003d sg.createVertexSet();\nrs \u003d sg.queryPgql(\"SELECT a MATCH (a) WHERE a.account_no \u003d \u0027xxx-yyy-201\u0027\");\nfor (r in rs) {\n  v \u003d r.getVertex(1)\n  vertexSet.add(v)\n  analyst.personalizedPagerank(sg, vertexSet)\n}",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 19:13:21.468",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TEXT",
            "data": "(no output)"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310372_-1335121912",
      "id": "20190328-164812_1574533639",
      "dateCreated": "2020-02-23 13:08:30.372",
      "dateStarted": "2020-05-06 19:09:46.742",
      "dateFinished": "2020-05-06 19:09:47.190",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%pgx\n// Lists the stores to recommended to John, i.e. stores that others in his network have bought from but he has not\nsg.queryPgql(\"\"\"\n  SELECT ID(x), x.name, x.pagerank\n  MATCH (x)\n  WHERE x.type \u003d \u0027merchant\u0027\n    AND NOT EXISTS (\n      SELECT *\n      MATCH (x)-[:purchased_by]-\u003e(a)\n      WHERE a.account_no \u003d \u0027xxx-yyy-201\u0027\n    )\n  ORDER BY x.pagerank DESC\n\"\"\")",
      "user": "anonymous",
      "dateUpdated": "2020-05-06 19:13:37.339",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {
          "0": {
            "graph": {
              "mode": "table",
              "height": 184.0,
              "optionOpen": false,
              "setting": {
                "table": {
                  "tableGridState": {},
                  "tableColumnTypeState": {
                    "names": {
                      "ID(x)": "string",
                      "x.name": "string",
                      "x.pagerank": "string"
                    },
                    "updated": false
                  },
                  "tableOptionSpecHash": "[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]",
                  "tableOptionValue": {
                    "useFilter": false,
                    "showPagination": false,
                    "showAggregationFooter": false
                  },
                  "updated": false,
                  "initialized": false
                }
              },
              "commonSetting": {}
            }
          }
        },
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "results": {
        "code": "SUCCESS",
        "msg": [
          {
            "type": "TABLE",
            "data": "ID(x)\tx.name\tx.pagerank\n303\tKindle Store\t0.04932640133302745\n304\tAsia Books\t0.04932640133302745\n305\tABC Travel\t0.01565535511504672"
          }
        ]
      },
      "apps": [],
      "jobName": "paragraph_1582463310375_-308906140",
      "id": "20190328-164916_532250489",
      "dateCreated": "2020-02-23 13:08:30.375",
      "dateStarted": "2020-05-06 19:11:49.462",
      "dateFinished": "2020-05-06 19:11:50.151",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "user": "anonymous",
      "dateUpdated": "2020-02-26 19:13:26.877",
      "config": {
        "tableHide": false,
        "editorSetting": {
          "language": "scala",
          "editOnDblClick": false,
          "completionKey": "TAB",
          "completionSupport": true
        },
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "results": {},
        "enabled": true,
        "fontSize": 9.0,
        "editorHide": false
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "apps": [],
      "jobName": "paragraph_1582463310378_1784539968",
      "id": "20190329-120236_1442605843",
      "dateCreated": "2020-02-23 13:08:30.379",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "Customer 360",
  "id": "2F3X6GXFY",
  "noteParams": {},
  "noteForms": {},
  "angularObjects": {
    "md:shared_process": [],
    "pgx:shared_process": []
  },
  "config": {
    "isZeppelinNotebookCronEnable": false,
    "looknfeel": "simple",
    "personalizedMode": "false"
  },
  "info": {}
}